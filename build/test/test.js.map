{"version":3,"sources":["../../server/test/test.js"],"names":["chai","use","chaiHttp","expect","describe","it","done","book","title","price","description","request","app","post","set","send","end","err","res","status","to","equal","body","data","include","id","get","should","have","property","bookId","eql","updatedBook","put"],"mappings":"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","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport 'chai/register-should';\nimport app from '../index';\n\nchai.use(chaiHttp);\nconst { expect } = chai;\n\ndescribe('Testing all endpoints: ', () => {\n  it('Should create a book', done => {\n    const book = {\n      title: 'Factory Settings',\n      price: '$4.00',\n      description: 'Its all about resetting to factory settings'\n    };\n\n    chai\n      .request(app)\n      .post('/api/v1/books')\n      .set('Accept', 'application/json')\n      .send(book)\n      .end((err, res) => {\n        expect(res.status).to.equal(201);\n        expect(res.body.data).to.include({\n          id: 1,\n          title: book.title,\n          price: book.price,\n          description: book.description\n        });\n        done();\n      });\n  });\n\n  it('Should not create a book with incomplete parameters', done => {\n    const book = {\n      price: '$15',\n      description: 'yope yope'\n    };\n\n    chai\n      .request(app)\n      .post('/api/v1/books')\n      .set('Accept', 'application/json')\n      .send(book)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        done();\n      });\n  });\n\n  it('Should get all books', done => {\n    chai\n      .request(app)\n      .get('/api/v1/books')\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.status).to.equal(200);\n        res.body.data[0].should.have.property('id');\n        res.body.data[0].should.have.property('title');\n        res.body.data[0].should.have.property('price');\n        res.body.data[0].should.have.property('description');\n        done();\n      });\n  });\n\n  it('Should get a particular book', done => {\n    const bookId = 1;\n\n    chai\n      .request(app)\n      .get(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        res.body.data.should.have.property('id');\n        res.body.data.should.have.property('title');\n        res.body.data.should.have.property('price');\n        res.body.data.should.have.property('description');\n        done();\n      });\n  });\n\n  it('Should not get a particular book with invalid id', done => {\n    const bookId = 8888;\n\n    chai\n      .request(app)\n      .get(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have\n          .property('message')\n          .eql(`Cannot find book with the id ${bookId}`);\n        done();\n      });\n  });\n\n  it('It should not get a particular book with non-numeric id', done => {\n    const bookId = 'aaa';\n    chai\n      .request(app)\n      .get(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have\n          .property('message')\n          .eql('Please input a valid numeric value');\n        done();\n      });\n  });\n\n  it('Should update a book', done => {\n    const bookId = 1;\n    const updatedBook = {\n      id: bookId,\n      title: 'sofware engineer 1',\n      price: '$10.99',\n      description: 'We have updated the price'\n    };\n\n    chai\n      .request(app)\n      .put(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .send(updatedBook)\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data.id).equal(updatedBook.id);\n        expect(res.body.data.title).equal(updatedBook.title);\n        expect(res.body.data.price).equal(updatedBook.price);\n        expect(res.body.data.description).equal(updatedBook.description);\n        done();\n      });\n  });\n\n  it('Should no t update a book with invalid id', done => {\n    const bookId = '9999';\n    const updatedBook = {\n      id: bookId,\n      title: 'Updated Awesome book again',\n      price: '$11.99',\n      description: 'We have updated the price'\n    };\n    chai\n      .request(app)\n      .put(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .send(updatedBook)\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have\n          .property('message')\n          .eql(`Cannot find book with the id: ${bookId}`);\n        done();\n      });\n  });\n\n  it('Should not update a book with non-numeric id value', done => {\n    const bookId = 'ggg';\n    const updatedBook = {\n      id: bookId,\n      title: 'Updated Awesome book again',\n      price: '$11.99',\n      description: 'We have updated the price'\n    };\n    chai\n      .request(app)\n      .put(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .send(updatedBook)\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have\n          .property('message')\n          .eql('Please input a valid numeric value');\n        done();\n      });\n  });\n\n  it('Should delete a book', done => {\n    const bookId = 1;\n    chai\n      .request(app)\n      .delete(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body.data).to.include({});\n        done();\n      });\n  });\n\n  it('Should not delete a book with invalid id', done => {\n    const bookId = 777;\n    chai\n      .request(app)\n      .delete(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(404);\n        res.body.should.have\n          .property('message')\n          .eql(`Book with the id ${bookId} cannot be found`);\n        done();\n      });\n  });\n\n  it('Should not delete a book with non-numeric id', done => {\n    const bookId = 'bbb';\n    chai\n      .request(app)\n      .delete(`/api/v1/books/${bookId}`)\n      .set('Accept', 'application/json')\n      .end((err, res) => {\n        expect(res.status).to.equal(400);\n        res.body.should.have\n          .property('message')\n          .eql('Please provide a numeric value');\n        done();\n      });\n  });\n});\n"],"file":"test.js"}